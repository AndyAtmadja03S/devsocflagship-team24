import type { CommitFile } from "./fetchCommit";
export function isAutoGeneratedCommit(files: CommitFile[]): boolean {
  const autoGenPatterns = [
    /node_modules\//,
    /package-lock\.json$/,
    /yarn\.lock$/,
    /\.min\.js$/,
    /\.min\.css$/,
    /dist\//,
    /build\//,
    /coverage\//,
  ];

  // If more than 50% of files match auto-gen patterns, consider it auto-generated
  const autoGenCount = files.filter(f => 
    autoGenPatterns.some(pattern => pattern.test(f.filename))
  ).length;

  return autoGenCount > files.length * 0.5;
}

export function calculateAggregateImpact(commits: any[]) {
  const totalLines = commits.reduce((sum, c) => sum + c.additions + c.deletions, 0);
  const avgLinesPerCommit = totalLines / commits.length;
  
  // Get unique files touched
  const uniqueFiles = new Set<string>();
  commits.forEach(c => {
    c.files?.forEach((f: any) => uniqueFiles.add(f.filename));
  });

  // consistency
  const dates = commits.map(c => new Date(c.date).toDateString());
  const uniqueDays = new Set(dates).size;
  const consistencyScore = Math.min(uniqueDays / 30, 1);

  const now = Date.now();
  const recentCommits = commits.filter(c => 
    (now - new Date(c.date).getTime()) < 90 * 24 * 60 * 60 * 1000
  ).length;
  const recencyScore = recentCommits / commits.length;

  const impactScore = (
    Math.min(totalLines / 10000, 1) * 300 +           // Volume 
    Math.min(avgLinesPerCommit / 100, 1) * 200 +      // Avg commit size
    Math.min(uniqueFiles.size / 50, 1) * 200 +        // File diversity 
    consistencyScore * 150 +                           // Consistency
    recencyScore * 50                                 // Recency
  );

  return Math.round(impactScore);
}
